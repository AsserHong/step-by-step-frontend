{"name":"Step-by-step-frontend","tagline":"step by step learning about frontend","body":"# Intro\r\nThis tutorial is created to introduce some frontend libraries & frameworks.\r\n\r\nTo avoid confusion, This tutorial is written simply and exclude optimization.\r\n\r\nif you want more information, look 'Related Links' placed at bottom of each tutorial.\r\n\r\n## Table of Contents\r\n1. [STEP1: Initialize node package](#step1-initialize-node-package)\r\n2. [STEP2: Use another node package](#step2-use-another-node-package)\r\n3. [STEP3: Make my package browser-executable by Webpack](#step3-make-my-package-browser-executable-by-webpack)\r\n4. [STEP4: Use ES6 syntax by Babel](#step4-use-es6-syntax-by-babel)\r\n5. [STEP5: Use React](#step5-use-react)\r\n6. [STEP6: Use Style Guide by ESLint](#step6-use-style-guide-by-eslint)\r\n7. [STEP7: Manage task by Gulp](#step7-manage-task-by-gulp)\r\n8. [STEP8: Add Sourcemaps by Webpack](#step8-add-sourcemaps-by-webpack)\r\n9. [STEP9: Create Simple app with Reflux & React](#step9-create-simple-app-with-reflux--react)\r\n10. [STEP10: Make your app sync with REST API server with json-server & jquery](#step10-make-your-app-sync-with-rest-api-server-with-json-server--jquery)\r\n\r\n## Step1: Initialize node package\r\n\r\n1. Initailize node package.\r\n\r\n  ```bash\r\n  npm init  # This command make package.json\r\n  ```\r\n\r\n  package.json\r\n  ```json\r\n  {\r\n    \"name\": \"step-by-step-frontend\",\r\n    \"version\": \"0.0.0\",\r\n    \"description\": \"step by step learning about frontend\",\r\n    \"main\": \"index.js\",\r\n    \"author\": \"ironhee <leechulhee95@gmail.com>\",\r\n    \"license\": \"MIT\"\r\n  }\r\n  ```\r\n\r\n3. Write your node module.\r\n\r\n  index.js\r\n  ```javascript\r\n  'use strict';  \r\n\r\n  module.exports = function helloWorld() {\r\n    console.log('hello world!');\r\n  };\r\n  ```\r\n\r\n4. load & run your module.\r\n\r\n  test.js\r\n  ```javascript\r\n  'use strict';\r\n\r\n  var helloWorld = require('./');\r\n  helloWorld();\r\n  ```\r\n\r\n  ```bash\r\n  node test.js  # hello world!\r\n  ```\r\n\r\n### Related links\r\n\r\n+ [strict mode ](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)\r\n+ [npm init](https://docs.npmjs.com/cli/init)\r\n+ [package.json](https://docs.npmjs.com/files/package.json)\r\n+ [modules](https://nodejs.org/api/modules.html)\r\n\r\n## Step2: Use another node package\r\n\r\n1. Install another node package.\r\n\r\n  ```bash\r\n  npm install --save underscore\r\n  ```\r\n\r\n  package.json\r\n  ```json\r\n  {\r\n    \"name\": \"step-by-step-frontend\",\r\n    \"version\": \"0.0.0\",\r\n    \"description\": \"step by step learning about frontend\",\r\n    \"main\": \"index.js\",\r\n    \"author\": \"ironhee <leechulhee95@gmail.com>\",\r\n    \"license\": \"MIT\",\r\n    \"dependencies\": {\r\n      \"underscore\": \"^1.8.3\"\r\n    }\r\n  }\r\n\r\n  ```\r\n\r\n3. update your node module.\r\n\r\n  index.js\r\n  ```javascript\r\n  'use strict';\r\n\r\n  var _ = require('underscore');\r\n\r\n  module.exports = function helloWorld() {\r\n    _.times(10, function (index) {\r\n      console.log('[' + index + '] hello world!');\r\n    });\r\n  };\r\n  ```\r\n\r\n4. load & run your module.\r\n\r\n  test.js\r\n  ```javascript\r\n  'use strict';\r\n\r\n  var helloWorld = require('./');\r\n  helloWorld();\r\n  ```\r\n\r\n  ```bash\r\n  node test.js  # [0] hello world! ...\r\n  ```\r\n\r\n5. create .gitignore\r\n\r\n  .gitignore\r\n  ```\r\n  node_modules\r\n  ```\r\n\r\n### Related links\r\n\r\n+ [require](https://nodejs.org/api/modules.html)\r\n+ [npm install](https://docs.npmjs.com/cli/install)\r\n+ [dependencies](https://docs.npmjs.com/files/package.json#dependencies)\r\n\r\n## Step3: Make my package browser-executable by Webpack\r\n\r\n1. Install & Initailize bower package.\r\n\r\n  ```bash\r\n  npm install -g bower\r\n  bower init  # This command make bower.json\r\n  ```\r\n\r\n  bower.json\r\n  ```json\r\n  {\r\n    \"name\": \"step-by-step-frontend\",\r\n    \"version\": \"0.0.0\",\r\n    \"description\": \"step by step learning about frontend\",\r\n    \"main\": \"dist/index.js\",\r\n    \"authors\": [\r\n      \"ironhee <iron@ediket.com>\"\r\n    ],\r\n    \"license\": \"MIT\"\r\n  }\r\n  ```\r\n\r\n2. Install webpack\r\n\r\n  ```bash\r\n  npm install -g webpack\r\n  ```\r\n\r\n3. create webpack config\r\n\r\n  webpack.config.js\r\n  ```javascript\r\n  'use strict';\r\n\r\n  var _ = require('underscore');\r\n  var pkg = require('./package.json');\r\n\r\n  module.exports = {\r\n    entry: {\r\n      'index': './index.js'\r\n    },\r\n    output: {\r\n      path: 'dist/',\r\n      filename: '[name].js',\r\n      library: 'MyLib',\r\n      libraryTarget: 'umd'\r\n    }\r\n  };\r\n  ```\r\n\r\n4. build source code by webpack\r\n\r\n  ```bash\r\n  webpack  # use webpack.config.js by default\r\n  ```\r\n\r\n  if you want to rebuild on file change, use --watch option\r\n  ```bash\r\n  webpack --watch  # ctrl-c to exit\r\n  ```\r\n\r\n5. load & run your module.\r\n\r\n  test.html\r\n  ```html\r\n  <html>\r\n    <body>\r\n      <script src='./dist/index.js'></script>\r\n      <script> MyLib(); </script>\r\n    </body>\r\n  </html>\r\n  ```\r\n\r\n6. change package.json 'main' property\r\n\r\n  package.json\r\n  ```json\r\n  {\r\n    \"name\": \"step-by-step-frontend\",\r\n    \"version\": \"0.0.0\",\r\n    \"description\": \"step by step learning about frontend\",\r\n    \"main\": \"dist/index.js\",\r\n    \"author\": \"ironhee <leechulhee95@gmail.com>\",\r\n    \"license\": \"MIT\",\r\n    \"dependencies\": {\r\n      \"underscore\": \"^1.8.3\"\r\n    }\r\n  }\r\n  ```\r\n\r\n7. load & run your node module.\r\n\r\n  test.js\r\n  ```javascript\r\n  'use strict';\r\n\r\n  var helloWorld = require('./');\r\n  helloWorld();\r\n  ```\r\n\r\n  ```bash\r\n  node test.js  # [0] hello world! ...\r\n  ```\r\n\r\n### Related links\r\n\r\n+ [bower](https://github.com/bower/bower)\r\n+ [webpack](https://github.com/webpack/webpack)\r\n+ [webpack config](http://webpack.github.io/docs/configuration.html)\r\n\r\n## Step4: Use ES6 syntax by Babel\r\n\r\n1. Install babel-loader by npm\r\n\r\n  ```bash\r\n  npm install --save-dev babel-loader\r\n  ```\r\n\r\n2. rename index.js and change content\r\n\r\n  ```bash\r\n  mv index.js index.es6\r\n  ```\r\n\r\n  index.es6\r\n  ```javascript\r\n  import _ from 'underscore';\r\n\r\n  export default function helloWorld() {\r\n    _.times(10, (index) => {\r\n      console.log(`[${index}] hello world!`);\r\n    });\r\n  }\r\n  ```\r\n\r\n3. change webpack config\r\n\r\n  webpack.config.js\r\n  ```javascript\r\n  'use strict';\r\n\r\n  var _ = require('underscore');\r\n  var pkg = require('./package.json');\r\n\r\n  module.exports = {\r\n    entry: {\r\n      'index': './index.es6'\r\n    },\r\n    output: {\r\n      path: 'dist/',\r\n      filename: '[name].js',\r\n      library: 'MyLib',\r\n      libraryTarget: 'umd'\r\n    },\r\n    module: {\r\n      loaders: [\r\n        { test: /\\.es6$/, loader: 'babel-loader' }\r\n      ]\r\n    }\r\n  };\r\n  ```\r\n\r\n4. build source code by webpack\r\n\r\n  ```bash\r\n  webpack\r\n  ```\r\n\r\n5. test browser-side and node-side\r\n\r\n  test.html\r\n  ```html\r\n  <html>\r\n    <body>\r\n      <script src='./dist/index.js'></script>\r\n      <script> MyLib(); </script>\r\n    </body>\r\n  </html>\r\n  ```\r\n\r\n  ```bash\r\n  node test.js  # [0] hello world! ...\r\n  ```\r\n\r\n### Related links\r\n\r\n+ [es6features](https://github.com/lukehoban/es6features)\r\n+ [babel](https://github.com/babel/babel)\r\n+ [webpack loader](http://webpack.github.io/docs/using-loaders.html)\r\n\r\n## Step5: Use React\r\n\r\n1. Install React by npm\r\n\r\n  ```bash\r\n  npm install --save react\r\n  ```\r\n\r\n2. make some directories\r\n\r\n  ```bash\r\n  mkdir -p src/js/components\r\n  ```\r\n\r\n3. create modules and rendering script\r\n\r\n  src/js/components/MyComponent.es6\r\n  ```javascript\r\n  import React from 'react';\r\n\r\n  export default React.createClass({\r\n\r\n    render() {\r\n      return (\r\n        <div>\r\n          <h1>Hello world!</h1>\r\n        </div>\r\n      );\r\n    }\r\n\r\n  });\r\n  ```\r\n\r\n  src/js/app.es6\r\n  ```javascript\r\n  import MyComponent from './components/MyComponent';\r\n\r\n  export default {\r\n    MyComponent\r\n  };\r\n  ```\r\n\r\n  src/js/main.es6\r\n  ```javascript\r\n  import React from 'react';\r\n  import { MyComponent } from './app';\r\n\r\n  React.render(<MyComponent/>, document.body);\r\n  ```\r\n\r\n4. remove old files and change webpack config\r\n\r\n  ```bash\r\n  rm -rf test.js test.html index.es6 dist/index.js\r\n  ```\r\n\r\n5. separate webpack config\r\n\r\n  webpack.base.config.js\r\n  ```javascript\r\n  'use strict';\r\n\r\n  module.exports = {\r\n    resolve: {\r\n      extensions: ['', '.js', '.es6']\r\n    },\r\n    module: {\r\n      loaders: [\r\n        { test: /\\.es6$/, loader: 'babel-loader' }\r\n      ]\r\n    }\r\n  };\r\n  ```\r\n\r\n  webpack.config.js\r\n  ```javascript\r\n  'use strict';\r\n\r\n  var _ = require('underscore');\r\n  var baseConfig = require('./webpack.base.config');\r\n\r\n  module.exports = _.extend({}, baseConfig, {\r\n    entry: {\r\n      'app': './src/js/app.es6'\r\n    },\r\n    output: {\r\n      path: 'dist/',\r\n      filename: 'index.js',\r\n      library: 'MyLib',\r\n      libraryTarget: 'umd'\r\n    }\r\n  });\r\n  ```\r\n\r\n  webpack.main.config.js\r\n  ```javascript\r\n  'use strict';\r\n\r\n  var _ = require('underscore');\r\n  var baseConfig = require('./webpack.base.config');\r\n\r\n  module.exports = _.extend({}, baseConfig, {\r\n    entry: {\r\n      'main': './src/js/main.es6'\r\n    },\r\n    output: {\r\n      path: 'dist/',\r\n      filename: 'main.js',\r\n      libraryTarget: 'umd'\r\n    }\r\n  });\r\n  ```\r\n\r\n6. build by webpack\r\n\r\n  ```bash\r\n  webpack  # build library code\r\n  webpack --config webpack.main.config # build rendering code\r\n  ```\r\n\r\n7. check in node and browser\r\n\r\n  ```bash\r\n  node -e 'console.log(require(\"./\"))'\r\n  # { MyComponent: { [Function] displayName: 'MyComponent' } }\r\n  ```\r\n\r\n  demo/index.html\r\n  ```html\r\n  <html>\r\n    <body>\r\n      <script src='../dist/index.js'></script>\r\n      <script> console.log(MyLib) </script>\r\n    </body>\r\n  </html>\r\n  ```\r\n\r\n8. use main.js (rendering logic) in browser\r\n\r\n  demo/index.html\r\n  ```html\r\n  <html>\r\n    <body>\r\n      <script src='../dist/index.js'></script>\r\n      <script> console.log(MyLib) </script>\r\n      <script src='../dist/main.js'></script>\r\n    </body>\r\n  </html>\r\n  ```\r\n\r\n\r\n### Related links\r\n\r\n+ [react](https://github.com/facebook/react)\r\n\r\n## Step6: Use Style Guide by ESLint\r\n\r\n1. Install eslint and plugins by npm\r\n\r\n  ```bash\r\n  npm install --save-dev eslint babel-eslint eslint-plugin-react\r\n  ```\r\n\r\n2. make eslint configs\r\n\r\n  .eslintrc\r\n  ```json\r\n  {\r\n    \"env\": {\r\n      \"browser\": true,\r\n      \"node\": true\r\n    },\r\n    \"rules\": {\r\n      \"strict\": [2, \"global\"],\r\n      \"no-shadow\": 2,\r\n      \"no-shadow-restricted-names\": 2,\r\n      \"no-unused-vars\": [2, {\r\n        \"vars\": \"local\",\r\n        \"args\": \"after-used\"\r\n      }],\r\n      \"no-use-before-define\": 2,\r\n      \"comma-dangle\": [2, \"never\"],\r\n      \"no-cond-assign\": [2, \"always\"],\r\n      \"no-console\": 1,\r\n      \"no-debugger\": 1,\r\n      \"no-alert\": 1,\r\n      \"no-constant-condition\": 1,\r\n      \"no-dupe-keys\": 2,\r\n      \"no-duplicate-case\": 2,\r\n      \"no-empty\": 2,\r\n      \"no-ex-assign\": 2,\r\n      \"no-extra-boolean-cast\": 0,\r\n      \"no-extra-semi\": 2,\r\n      \"no-func-assign\": 2,\r\n      \"no-inner-declarations\": 2,\r\n      \"no-invalid-regexp\": 2,\r\n      \"no-irregular-whitespace\": 2,\r\n      \"no-obj-calls\": 2,\r\n      \"no-reserved-keys\": 2,\r\n      \"no-sparse-arrays\": 2,\r\n      \"no-unreachable\": 2,\r\n      \"use-isnan\": 2,\r\n      \"block-scoped-var\": 2,\r\n      \"consistent-return\": 2,\r\n      \"curly\": [2, \"multi-line\"],\r\n      \"default-case\": 2,\r\n      \"dot-notation\": [2, {\r\n        \"allowKeywords\": true\r\n      }],\r\n      \"eqeqeq\": 2,\r\n      \"guard-for-in\": 2,\r\n      \"no-caller\": 2,\r\n      \"no-else-return\": 2,\r\n      \"no-eq-null\": 2,\r\n      \"no-eval\": 2,\r\n      \"no-extend-native\": 2,\r\n      \"no-extra-bind\": 2,\r\n      \"no-fallthrough\": 2,\r\n      \"no-floating-decimal\": 2,\r\n      \"no-implied-eval\": 2,\r\n      \"no-lone-blocks\": 2,\r\n      \"no-loop-func\": 2,\r\n      \"no-multi-str\": 2,\r\n      \"no-native-reassign\": 2,\r\n      \"no-new\": 2,\r\n      \"no-new-func\": 2,\r\n      \"no-new-wrappers\": 2,\r\n      \"no-octal\": 2,\r\n      \"no-octal-escape\": 2,\r\n      \"no-param-reassign\": 2,\r\n      \"no-proto\": 2,\r\n      \"no-redeclare\": 2,\r\n      \"no-return-assign\": 2,\r\n      \"no-script-url\": 2,\r\n      \"no-self-compare\": 2,\r\n      \"no-sequences\": 2,\r\n      \"no-throw-literal\": 2,\r\n      \"no-with\": 2,\r\n      \"radix\": 2,\r\n      \"vars-on-top\": 2,\r\n      \"wrap-iife\": [2, \"any\"],\r\n      \"yoda\": 2,\r\n      \"indent\": [2, 2],\r\n      \"brace-style\": [2,\r\n        \"1tbs\", {\r\n        \"allowSingleLine\": true\r\n      }],\r\n      \"quotes\": [\r\n        2, \"single\", \"avoid-escape\"\r\n      ],\r\n      \"camelcase\": [2, {\r\n        \"properties\": \"never\"\r\n      }],\r\n      \"comma-spacing\": [2, {\r\n        \"before\": false,\r\n        \"after\": true\r\n      }],\r\n      \"comma-style\": [2, \"last\"],\r\n      \"eol-last\": 2,\r\n      \"func-names\": 1,\r\n      \"key-spacing\": [2, {\r\n          \"beforeColon\": false,\r\n          \"afterColon\": true\r\n      }],\r\n      \"new-cap\": [2, {\r\n        \"newIsCap\": true\r\n      }],\r\n      \"no-multiple-empty-lines\": [2, {\r\n        \"max\": 2\r\n      }],\r\n      \"no-nested-ternary\": 2,\r\n      \"no-new-object\": 2,\r\n      \"no-spaced-func\": 2,\r\n      \"no-trailing-spaces\": 2,\r\n      \"no-wrap-func\": 2,\r\n      \"no-underscore-dangle\": 0,\r\n      \"one-var\": [2, \"never\"],\r\n      \"padded-blocks\": [2, \"never\"],\r\n      \"semi\": [2, \"always\"],\r\n      \"semi-spacing\": [2, {\r\n        \"before\": false,\r\n        \"after\": true\r\n      }],\r\n      \"space-after-keywords\": 2,\r\n      \"space-before-blocks\": 2,\r\n      \"space-before-function-paren\": [2, \"never\"],\r\n      \"space-infix-ops\": 2,\r\n      \"space-return-throw-case\": 2,\r\n      \"spaced-line-comment\": 2,\r\n    }\r\n  }\r\n  ```\r\n\r\n  src/js/.estlinrc\r\n  ```json\r\n  {\r\n    \"parser\": \"babel-eslint\",\r\n    \"plugins\": [\r\n      \"react\"\r\n    ],\r\n    \"ecmaFeatures\": {\r\n      \"arrowFunctions\": true,\r\n      \"blockBindings\": true,\r\n      \"classes\": true,\r\n      \"defaultParams\": true,\r\n      \"destructuring\": true,\r\n      \"forOf\": true,\r\n      \"generators\": false,\r\n      \"modules\": true,\r\n      \"objectLiteralComputedProperties\": true,\r\n      \"objectLiteralDuplicateProperties\": false,\r\n      \"objectLiteralShorthandMethods\": true,\r\n      \"objectLiteralShorthandProperties\": true,\r\n      \"spread\": true,\r\n      \"superInFunctions\": true,\r\n      \"templateStrings\": true,\r\n      \"jsx\": true\r\n    },\r\n    \"rules\": {\r\n      \"strict\": [2, \"never\"],\r\n      \"no-var\": 2,\r\n      \"react/display-name\": 0,\r\n      \"react/jsx-boolean-value\": 2,\r\n      \"react/jsx-quotes\": [2, \"double\"],\r\n      \"react/jsx-no-undef\": 2,\r\n      \"react/jsx-sort-props\": 0,\r\n      \"react/jsx-sort-prop-types\": 0,\r\n      \"react/jsx-uses-react\": 2,\r\n      \"react/jsx-uses-vars\": 2,\r\n      \"react/no-did-mount-set-state\": [2, \"allow-in-func\"],\r\n      \"react/no-did-update-set-state\": 2,\r\n      \"react/no-multi-comp\": 2,\r\n      \"react/no-unknown-property\": 2,\r\n      \"react/prop-types\": 2,\r\n      \"react/react-in-jsx-scope\": 2,\r\n      \"react/self-closing-comp\": 2,\r\n      \"react/wrap-multilines\": 2,\r\n      \"react/sort-comp\": [2, {\r\n        \"order\": [\r\n          \"displayName\",\r\n          \"mixins\",\r\n          \"statics\",\r\n          \"propTypes\",\r\n          \"getDefaultProps\",\r\n          \"getInitialState\",\r\n          \"componentWillMount\",\r\n          \"componentDidMount\",\r\n          \"componentWillReceiveProps\",\r\n          \"shouldComponentUpdate\",\r\n          \"componentWillUpdate\",\r\n          \"componentWillUnmount\",\r\n          \"/^on.+$/\",\r\n          \"/^get.+$/\",\r\n          \"/^render.+$/\",\r\n          \"render\"\r\n        ]\r\n      }]\r\n    }\r\n  }\r\n  ```\r\n\r\n3. install editor plugin\r\n  - sublime text: Install SublimeLinter & SublimeLinter-eslint\r\n  - atom: Install linter & linter-eslint\r\n\r\n### Related links\r\n\r\n+ [airbnb javascript style guide](https://github.com/airbnb/javascript)\r\n+ [eslint](http://eslint.org/)\r\n+ [eslint config](http://eslint.org/docs/user-guide/configuring.html)\r\n+ [atom](https://atom.io/)\r\n+ [sublimt text](http://www.sublimetext.com/)\r\n\r\n## Step7: Manage task by Gulp\r\n\r\n1. Install gulp by npm\r\n\r\n  ```bash\r\n  npm install -g gulp\r\n  npm install --save-dev gulp\r\n  ```\r\n\r\n2. Install webpack and plugin by npm\r\n\r\n  ```bash\r\n  npm install --save-dev webpack\r\n  npm install --save-dev webpack-gulp-logger\r\n  ```\r\n\r\n3. create gulp config file (gulpfile.js)\r\n\r\n  gulpfile.js\r\n  ```javascript\r\n  'use strict';\r\n\r\n  var gulp = require('gulp');\r\n  var webpack = require('webpack');\r\n  var webpackLogger = require('webpack-gulp-logger');\r\n  var libWebpackConfig = require('./webpack.config');\r\n  var mainWebpackConfig = require('./webpack.main.config');\r\n\r\n  gulp.task('default', [\r\n    'watch'\r\n  ]);\r\n\r\n  gulp.task('watch', [\r\n    'watch-lib',\r\n    'watch-main'\r\n  ]);\r\n\r\n  gulp.task('build', [\r\n    'build-lib',\r\n    'build-main'\r\n  ]);\r\n\r\n  gulp.task('watch-lib', function() {\r\n    webpack(libWebpackConfig).watch({}, webpackLogger());\r\n  });\r\n\r\n  gulp.task('watch-main', function() {\r\n    webpack(mainWebpackConfig).watch({}, webpackLogger());\r\n  });\r\n\r\n  gulp.task('build-lib', function(callback) {\r\n    webpack(libWebpackConfig).run(webpackLogger(callback));\r\n  });\r\n\r\n  gulp.task('build-main', function(callback) {\r\n    webpack(mainWebpackConfig).run(webpackLogger(callback));\r\n  });\r\n  ```\r\n\r\n4. run gulp task\r\n\r\n  for build\r\n  ```bash\r\n  gulp build\r\n  ```\r\n\r\n  for watch\r\n  ```bash\r\n  gulp watch\r\n  ```\r\n\r\n### Related links\r\n\r\n+ [gulp](https://github.com/gulpjs/gulp)\r\n+ [webpack api](http://webpack.github.io/docs/node.js-api.html)\r\n\r\n## Step8: Add Sourcemaps by Webpack\r\n\r\n1. set devtool property in webpack config\r\n\r\n  webpack.base.config.js\r\n  ```javascript\r\n  'use strict';\r\n\r\n  module.exports = {\r\n    devtool: 'eval-source-map',\r\n    resolve: {\r\n      extensions: ['', '.js', '.es6']\r\n    },\r\n    module: {\r\n      loaders: [\r\n        { test: /\\.es6$/, loader: 'babel-loader' }\r\n      ]\r\n    }\r\n  };\r\n  ```\r\n\r\n2. build by gulp\r\n\r\n  ```bash\r\n  gulp build\r\n  ```\r\n\r\n  now you can distinguish source code.\r\n\r\n\r\n### Related links\r\n\r\n+ [sourcemap](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/?redirect_from_locale=ko)\r\n+ [devtool option](http://webpack.github.io/docs/configuration.html#devtool)\r\n\r\n## Step9: Create Simple app with Reflux & React\r\n\r\n1. add resolve.modulesDirectories option to webpack config for convenience\r\n\r\n  webpack.base.config\r\n  ```javascript\r\n  'use strict';\r\n\r\n  module.exports = {\r\n    devtool: 'eval-source-map',\r\n    resolve: {\r\n      modulesDirectories: ['src/js/', 'node_modules'],\r\n      extensions: ['', '.js', '.es6']\r\n    },\r\n    module: {\r\n      loaders: [\r\n        { test: /\\.es6$/, loader: 'babel-loader' }\r\n      ]\r\n    }\r\n  };\r\n  ```\r\n\r\n2. create Commment.es6 and CommentSite.es6\r\n\r\n  src/js/components/Comment.es6\r\n  ```javascript\r\n  import React from 'react';\r\n\r\n  export default React.createClass({\r\n\r\n    propTypes: {\r\n      comment: React.PropTypes.shape({\r\n        content: React.PropTypes.string.isRequired,\r\n        updatedAt: React.PropTypes.object.isRequired\r\n      }).isRequired\r\n    },\r\n\r\n    render() {\r\n      return (\r\n        <div>\r\n          { this.props.comment.content } -\r\n          { this.props.comment.updatedAt.toDateString() }\r\n          <a href=\"#\">remove</a>\r\n        </div>\r\n      );\r\n    }\r\n\r\n  });\r\n  ```\r\n\r\n  src/js/components/CommentSite.es6\r\n  ```javascript\r\n  import React from 'react';\r\n  import _ from 'underscore';\r\n  import Comment from 'components/Comment';\r\n\r\n  export default React.createClass({\r\n\r\n    getInitialState() {\r\n      return {\r\n        comments: [{\r\n          id: 1,\r\n          content: 'this is comment1!',\r\n          updatedAt: new Date(Date.now())\r\n        }, {\r\n          id: 2,\r\n          content: 'this is comment2!',\r\n          updatedAt: new Date(Date.now())\r\n        }]\r\n      };\r\n    },\r\n\r\n    render() {\r\n      return (\r\n        <div>\r\n          <h3>Comments</h3>\r\n          { _.map(this.state.comments, comment => (\r\n            <Comment comment={ comment } key={ comment.id } />\r\n          )) }\r\n          <form>\r\n            <textarea ref=\"newComment\"></textarea>\r\n            <button>Comment!</button>\r\n          </form>\r\n        </div>\r\n      );\r\n    }\r\n\r\n  });\r\n  ```\r\n\r\n3. add CommentSite to app.es6\r\n\r\n  src/js/app.es6\r\n  ```javascript\r\n  import MyComponent from 'components/MyComponent';\r\n  import CommentSite from 'components/CommentSite';\r\n\r\n  export default {\r\n    MyComponent,\r\n    CommentSite\r\n  };\r\n  ```\r\n\r\n4. change main.es6\r\n\r\n  main.es6\r\n  ```javascript\r\n  import React from 'react';\r\n  import { CommentSite } from 'app';\r\n\r\n  React.render(<CommentSite/>, document.body);\r\n  ```\r\n\r\n5. open demo.index.html in browser and check components are correctly rendered\r\n\r\n6. install reflux, q, underscore-db by npm\r\n\r\n  ```bash\r\n  npm install --save reflux q@~1.0 underscore-db\r\n  ```\r\n\r\n7. add node.fs option to webpack config\r\n\r\n  webpack.base.config\r\n  ```javascript\r\n  'use strict';\r\n\r\n  module.exports = {\r\n    devtool: 'eval-source-map',\r\n    node: {\r\n      fs: 'empty'\r\n    },\r\n    resolve: {\r\n      modulesDirectories: ['src/js/', 'node_modules'],\r\n      extensions: ['', '.js', '.es6']\r\n    },\r\n    module: {\r\n      loaders: [\r\n        { test: /\\.es6$/, loader: 'babel-loader' }\r\n      ]\r\n    }\r\n  };\r\n  ```\r\n\r\n8. define comment actions\r\n\r\n  src/js/actions/CommentActions.es6\r\n  ```javascript\r\n  import Reflux from 'reflux';\r\n\r\n  export default Reflux.createActions({\r\n\r\n    createComment: {\r\n      asyncResult: true\r\n    },\r\n\r\n    removeComment: {\r\n      asyncResult: true\r\n    }\r\n\r\n  });\r\n  ```\r\n\r\n9. set reflux promise factory to Q.Promise\r\n\r\n  src/js/app.es6\r\n  ```javascript\r\n  import Reflux from 'reflux';\r\n  import Q from 'q';\r\n  Reflux.setPromiseFactory(Q.Promise);\r\n\r\n  import MyComponent from 'components/MyComponent';\r\n  import CommentSite from 'components/CommentSite';\r\n\r\n  export default {\r\n    MyComponent,\r\n    CommentSite\r\n  };\r\n  ```\r\n\r\n10. create comment store\r\n\r\n  src/js/mixins/DBMixin.es6\r\n  ```javascript\r\n  import underscoreDB from 'underscore-db';\r\n  import _ from 'underscore';\r\n\r\n  _.mixin(underscoreDB);\r\n\r\n  export default function DBMixin() {\r\n    let result = {\r\n      db: []\r\n    };\r\n\r\n    _.extend(result, _(result.db));\r\n    return result;\r\n  }\r\n  ```\r\n\r\n  src/js/stores/CommentStore.es6\r\n  ```javascript\r\n  import Reflux from 'reflux';\r\n  import CommentActions from 'actions/CommentActions';\r\n  import DBMixin from 'mixins/DBMixin';\r\n  import { Promise } from 'q';\r\n\r\n  export default Reflux.createStore({\r\n\r\n    mixins: [new DBMixin()],\r\n\r\n    listenables: [CommentActions],\r\n\r\n    onCreateComment(content) {\r\n      CommentActions.createComment.promise(\r\n        new Promise((resolve) => {\r\n          let comment = this.insert({\r\n            content,\r\n            updatedAt: new Date(Date.now())\r\n          });\r\n          resolve(comment);\r\n          this.trigger();\r\n        })\r\n      );\r\n    },\r\n\r\n    onRemoveComment(commentID) {\r\n      CommentActions.removeComment.promise(\r\n        new Promise((resolve) => {\r\n          let comment = this.removeById(commentID);\r\n          resolve(comment);\r\n          this.trigger();\r\n        })\r\n      );\r\n    }\r\n\r\n  });\r\n  ```\r\n\r\n11. make Commment.es6 and CommentSite.es6 use store & actions\r\n\r\n  src/js/components/Comment.es6\r\n  ```javascript\r\n  import React from 'react';\r\n  import CommentActions from 'actions/CommentActions';\r\n\r\n  export default React.createClass({\r\n\r\n    propTypes: {\r\n      comment: React.PropTypes.shape({\r\n        content: React.PropTypes.string.isRequired,\r\n        updatedAt: React.PropTypes.object.isRequired\r\n      }).isRequired\r\n    },\r\n\r\n    onRemove() {\r\n      CommentActions.removeComment(this.props.comment.id)\r\n      .then(() => {\r\n        alert('removed!');\r\n      });\r\n      return false;\r\n    },\r\n\r\n    render() {\r\n      return (\r\n        <div>\r\n          { this.props.comment.content } -\r\n          { this.props.comment.updatedAt.toDateString() }\r\n          <a href=\"#\" onClick={ this.onRemove }>remove</a>\r\n        </div>\r\n      );\r\n    }\r\n\r\n  });\r\n  ```\r\n\r\n  src/js/components/CommentSite.es6\r\n  ```javascript\r\n  import React from 'react';\r\n  import Reflux from 'reflux';\r\n  import _ from 'underscore';\r\n  import Comment from 'components/Comment';\r\n  import CommentStore from 'stores/CommentStore';\r\n  import CommentActions from 'actions/CommentActions';\r\n\r\n  function getStoreState() {\r\n    return {\r\n      comments: CommentStore.value()\r\n    };\r\n  }\r\n\r\n  export default React.createClass({\r\n\r\n    mixins: [\r\n      Reflux.listenTo(CommentStore, 'onStoreChange')\r\n    ],\r\n\r\n    getInitialState() {\r\n      return getStoreState();\r\n    },\r\n\r\n    onStoreChange() {\r\n      this.setState(getStoreState());\r\n    },\r\n\r\n    onCreateComment() {\r\n      let content = React.findDOMNode(this.refs.newComment).value;\r\n      CommentActions.createComment(content)\r\n      .then(() => {\r\n        alert('created!');\r\n      });\r\n      return false;\r\n    },\r\n\r\n    render() {\r\n      return (\r\n        <div>\r\n          <h3>Comments</h3>\r\n          { _.map(this.state.comments, comment => (\r\n            <Comment comment={ comment } key={ comment.id } />\r\n          )) }\r\n          <form onSubmit={ this.onCreateComment }>\r\n            <textarea ref=\"newComment\"></textarea>\r\n            <button>Comment!</button>\r\n          </form>\r\n        </div>\r\n      );\r\n    }\r\n\r\n  });\r\n  ```\r\n\r\n12. open demo.index.html in browser and check components are correctly operated\r\n\r\n### Related links\r\n\r\n+ [modulesDirectories option](http://webpack.github.io/docs/configuration.html#resolve-modulesdirectories)\r\n+ [promise](http://www.html5rocks.com/ko/tutorials/es6/promises/)\r\n+ [q](http://documentup.com/kriskowal/q/)\r\n+ [flux](https://github.com/facebook/flux)\r\n+ [reflux](https://github.com/spoike/refluxjs)\r\n+ [react](https://github.com/facebook/react)\r\n+ [underscore-db](https://github.com/typicode/underscore-db)\r\n+ [reflux-todo](https://github.com/spoike/refluxjs-todo)\r\n+ [Cannot resolve module 'fs'](https://github.com/webpack/jade-loader/issues/8)\r\n\r\n## STEP10: Make your app sync with REST API server with json-server & jquery\r\n\r\n1. Install json-server globally by npm\r\n\r\n  ```bash\r\n  npm install -g json-server\r\n  ```\r\n\r\n2. Create directory for json-server\r\n\r\n  ```bash\r\n  mkdir public\r\n  ```\r\n\r\n3. Move demo/index.html to public/index.html\r\n\r\n  ```bash\r\n  mv demo/index.html public\r\n  rm -rf demo\r\n  ```\r\n\r\n4. Change content of public/index.html\r\n\r\n  public/index.html\r\n  ```html\r\n  <html>\r\n    <body>\r\n      <script src='/static/main.js'></script>\r\n    </body>\r\n  </html>\r\n  ```\r\n\r\n5. Make symbolic link of static files.\r\n\r\n  ```\r\n  ln -s ../dist/ public/static\r\n  ```\r\n\r\n6. create db.json\r\n\r\n  db.json\r\n  ```json\r\n  {}\r\n  ```\r\n\r\n7. Run json-server\r\n\r\n  ```bash\r\n  json-server db.json\r\n  #  {^_^} Hi!\r\n  #  \r\n  # Loading database from db.json\r\n  #\r\n  #\r\n  # You can now go to http://localhost:3000\r\n  #\r\n  # Enter s at any time to create a snapshot # of the db\r\n  ```\r\n\r\n8. Open http://localhost:3000 in browser. and check your app is correctly operated.\r\n\r\n9. Install jquery, url-join by npm\r\n\r\n  ```bash\r\n  npm install -S jquery url-join\r\n  ```\r\n\r\n10. Make CommentStore use Ajax Request.\r\n\r\n  src/js/mixins/DBMixin.es6\r\n  ```javascript\r\n  import underscoreDB from 'underscore-db';\r\n  import _ from 'underscore';\r\n  import $ from 'jquery';\r\n  import urlJoin from 'url-join';\r\n  import { Promise } from 'q';\r\n\r\n  _.mixin(underscoreDB);\r\n\r\n  function ajaxRequest(options) {\r\n    return new Promise((resolve, reject) => {\r\n      $.ajax(options)\r\n        .then(resolve)\r\n        .fail(reject);\r\n    });\r\n  }\r\n\r\n  export default function DBMixin(type) {\r\n    let result = {\r\n      db: []\r\n    };\r\n    let methods = _(result.db);\r\n    _.extend(result, methods);\r\n    _.extend(result, {\r\n      insert(attributes) {\r\n        return ajaxRequest({\r\n          type: 'POST',\r\n          url: urlJoin(type),\r\n          data: attributes\r\n        })\r\n        .then(response => {\r\n          return response;\r\n        })\r\n        .then(response => methods.insert(response));\r\n      },\r\n      removeById(id) {\r\n        return ajaxRequest({\r\n          type: 'DELETE',\r\n          url: urlJoin(type, id)\r\n        })\r\n        .then(() => methods.removeById(id));\r\n      }\r\n    });\r\n\r\n    return result;\r\n  }\r\n  ```\r\n\r\n  src/js/stores/CommentStore.es6\r\n  ```javascript\r\n  import Reflux from 'reflux';\r\n  import CommentActions from 'actions/CommentActions';\r\n  import DBMixin from 'mixins/DBMixin';\r\n  import { Promise } from 'q';\r\n\r\n  export default Reflux.createStore({\r\n\r\n    mixins: [new DBMixin('comments')],\r\n\r\n    listenables: [CommentActions],\r\n\r\n    onCreateComment(content) {\r\n      CommentActions.createComment.promise(\r\n        new Promise((resolve, reject) => {\r\n          this.insert({\r\n            content,\r\n            updatedAt: new Date().getTime()\r\n          })\r\n          .then(comment => resolve(comment))\r\n          .then(() => this.trigger())\r\n          .catch(reject);\r\n        })\r\n      );\r\n    },\r\n\r\n    onRemoveComment(commentID) {\r\n      CommentActions.removeComment.promise(\r\n        new Promise((resolve, reject) => {\r\n          this.removeById(commentID)\r\n          .then(comment => resolve(comment))\r\n          .then(() => this.trigger())\r\n          .catch(reject);\r\n        })\r\n      );\r\n    }\r\n\r\n  });\r\n  ```\r\n\r\n  Warning: comment.updatedAt field's type is change.\r\n\r\n11. Apply comment.updatedAt field's type change.\r\n\r\n  src/js/components/Comment.es6\r\n  ```javascript\r\n  import React from 'react';\r\n  import CommentActions from 'actions/CommentActions';\r\n\r\n  export default React.createClass({\r\n\r\n    propTypes: {\r\n      comment: React.PropTypes.shape({\r\n        content: React.PropTypes.string.isRequired,\r\n        updatedAt: React.PropTypes.number.isRequired\r\n      }).isRequired\r\n    },\r\n\r\n    onRemove() {\r\n      CommentActions.removeComment(this.props.comment.id)\r\n      .then(() => {\r\n        alert('removed!');\r\n      });\r\n      return false;\r\n    },\r\n\r\n    render() {\r\n      return (\r\n        <div>\r\n          { this.props.comment.content } -\r\n          { new Date(this.props.comment.updatedAt).toDateString() }\r\n          <a href=\"#\" onClick={ this.onRemove }>remove</a>\r\n        </div>\r\n      );\r\n    }\r\n\r\n  });\r\n  ```\r\n\r\n12. Open http://localhost:3000 in browser. and check your app make ajax request correctly.\r\n\r\n14. add fetchComments action to CommentActions\r\n\r\n  src/js/actions/CommentActions.es6\r\n  ```javascript\r\n  import Reflux from 'reflux';\r\n\r\n  export default Reflux.createActions({\r\n\r\n    fetchComments: {\r\n      asyncResult: true\r\n    },\r\n\r\n    createComment: {\r\n      asyncResult: true\r\n    },\r\n\r\n    removeComment: {\r\n      asyncResult: true\r\n    }\r\n\r\n  });\r\n  ```\r\n\r\n15. make CommentSite trigger fetchComment action after rendered. (componentDidMount)\r\n\r\n  src/js/components/CommentSite.es6\r\n  ```javascript\r\n  import React from 'react';\r\n  import Reflux from 'reflux';\r\n  import _ from 'underscore';\r\n  import Comment from 'components/Comment';\r\n  import CommentStore from 'stores/CommentStore';\r\n  import CommentActions from 'actions/CommentActions';\r\n\r\n  function getStoreState() {\r\n    return {\r\n      comments: CommentStore.value()\r\n    };\r\n  }\r\n\r\n  export default React.createClass({\r\n\r\n    mixins: [\r\n      Reflux.listenTo(CommentStore, 'onStoreChange')\r\n    ],\r\n\r\n    getInitialState() {\r\n      return getStoreState();\r\n    },\r\n\r\n    componentDidMount() {\r\n      CommentActions.fetchComments();\r\n    },\r\n\r\n    onStoreChange() {\r\n      this.setState(getStoreState());\r\n    },\r\n\r\n    onCreateComment() {\r\n      let content = React.findDOMNode(this.refs.newComment).value;\r\n      CommentActions.createComment(content)\r\n      .then(() => {\r\n        alert('created!');\r\n      });\r\n      return false;\r\n    },\r\n\r\n    render() {\r\n      return (\r\n        <div>\r\n          <h3>Comments</h3>\r\n          { _.map(this.state.comments, comment => (\r\n            <Comment comment={ comment } key={ comment.id } />\r\n          )) }\r\n          <form onSubmit={ this.onCreateComment }>\r\n            <textarea ref=\"newComment\"></textarea>\r\n            <button>Comment!</button>\r\n          </form>\r\n        </div>\r\n      );\r\n    }\r\n\r\n  });\r\n  ```\r\n\r\n16. implement fetch method\r\n\r\n  src/js/mixins/DBMixin.es6\r\n  ```javascript\r\n  import underscoreDB from 'underscore-db';\r\n  import _ from 'underscore';\r\n  import $ from 'jquery';\r\n  import urlJoin from 'url-join';\r\n  import { Promise } from 'q';\r\n\r\n  _.mixin(underscoreDB);\r\n\r\n  function ajaxRequest(options) {\r\n    return new Promise((resolve, reject) => {\r\n      $.ajax(options)\r\n        .then(resolve)\r\n        .fail(reject);\r\n    });\r\n  }\r\n\r\n  export default function DBMixin(type) {\r\n    let result = {\r\n      db: []\r\n    };\r\n    let methods = _(result.db);\r\n    _.extend(result, methods);\r\n    _.extend(result, {\r\n      insert(attributes) {\r\n        return ajaxRequest({\r\n          type: 'POST',\r\n          url: urlJoin(type),\r\n          data: attributes\r\n        })\r\n        .then(response => {\r\n          return response;\r\n        })\r\n        .then(response => methods.insert(response));\r\n      },\r\n      removeById(id) {\r\n        return ajaxRequest({\r\n          type: 'DELETE',\r\n          url: urlJoin(type, id)\r\n        })\r\n        .then(() => methods.removeById(id));\r\n      },\r\n      fetch(id) {\r\n        return ajaxRequest({\r\n          type: 'GET',\r\n          url: urlJoin(type, id)\r\n        })\r\n        .then(response => _.isArray(response) ?\r\n          _.map(response, _response => methods.insert(_response)) :\r\n          methods.insert(response)\r\n        );\r\n      }\r\n    });\r\n\r\n    return result;\r\n  }\r\n  ```\r\n\r\n  src/js/stores/CommentStore.es6\r\n  ```javascript\r\n  import Reflux from 'reflux';\r\n  import CommentActions from 'actions/CommentActions';\r\n  import DBMixin from 'mixins/DBMixin';\r\n  import { Promise } from 'q';\r\n\r\n  export default Reflux.createStore({\r\n\r\n    mixins: [new DBMixin('comments')],\r\n\r\n    listenables: [CommentActions],\r\n\r\n    onFetchComments() {\r\n      CommentActions.fetchComments.promise(\r\n        new Promise((resolve, reject) => {\r\n          this.fetch()\r\n          .then(comments => resolve(comments))\r\n          .then(() => this.trigger())\r\n          .catch(reject);\r\n        })\r\n      );\r\n    },\r\n\r\n    onCreateComment(content) {\r\n      CommentActions.createComment.promise(\r\n        new Promise((resolve, reject) => {\r\n          this.insert({\r\n            content,\r\n            updatedAt: new Date().getTime()\r\n          })\r\n          .then(comment => resolve(comment))\r\n          .then(() => this.trigger())\r\n          .catch(reject);\r\n        })\r\n      );\r\n    },\r\n\r\n    onRemoveComment(commentID) {\r\n      CommentActions.removeComment.promise(\r\n        new Promise((resolve, reject) => {\r\n          this.removeById(commentID)\r\n          .then(comment => resolve(comment))\r\n          .then(() => this.trigger())\r\n          .catch(reject);\r\n        })\r\n      );\r\n    }\r\n\r\n  });\r\n  ```\r\n\r\n17. Open http://localhost:3000 in browser. and check your app make get request after initial rendering and your comments is correctly rendered.\r\n\r\n18. add db.json to .gitignore\r\n\r\n  .gitignore\r\n  ```\r\n  node_modules\r\n  db.json\r\n  ```\r\n\r\n### Related links\r\n\r\n+ [url-join](https://github.com/jfromaniello/url-join)\r\n+ [json-server](https://github.com/typicode/json-server)\r\n+ [jquery](https://github.com/jquery/jquery)\r\n+ [ajax](https://developer.mozilla.org/en-US/docs/AJAX)\r\n+ [what-exactly-is-restful-programming](http://stackoverflow.com/questions/671118/what-exactly-is-restful-programming)\r\n+ [RFC2616 - Method](http://tools.ietf.org/html/rfc2616#section-9)\r\n+ [jsonapi](http://jsonapi.org/)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}